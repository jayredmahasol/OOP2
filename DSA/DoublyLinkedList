/* 
NAME: JAYRED DEIL MAHASOL
      JUSTINE MHARS MUMAR
ACTIVITY#3: DOUBLY LINKED LIST
*/     
      
import java.util.*;
public class Node {
   int data;
   Node prev;
   Node next;

   public Node(int data) {
      this.data = data;
      this.prev = null;
      this.next = null;
   }
}

class DoublyLinkedList {
    private Node head;
    private Node tail;
    private int count;
    
   // CASE 5
   public void printForward(){ // Method for printing forward
      Node current = head; 
      while (current != null) { 
         System.out.print("[" + current.data + "] "); 
         current = current.next;
      }
   }
   // CASE 6
   public void printBackward(){ // Method for printing backwards 
      Node current = tail;
      while (current != null) { 
         System.out.print("[" + current.data + "] "); 
         current = current.prev; 
      }
   }   
   // CASE 1
   public void insert(int item) {
        Node newNode = new Node(item);

        if (isEmpty()) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            newNode.prev = tail;
            tail = newNode;
        }
        count++;
    }
   // CASE 4
   public int getLength() { // Method for knowing the length of the elements
      int count = 0;
      Node current = head;
      while (current != null) {
         count++;
         current = current.next;
      }
         System.out.println("Number of Element: " + count);
   return count;
}
   // CASE 3
   public boolean isEmpty() {
        return count == 0;
   }
   // CASE 2
   public void clear() {
      head = null;
      tail = null;
      System.out.println("List initialized.");      
   
   }
   
   // CASE 10
   public void deletenode(int key) { // Method for deleting a node
      
      Node temp = head;
      Node prev = null;
      if (temp != null && temp.data == key) {
         head = temp.next;
         return;
      }
      
      while (temp != null && temp.data != key) { 
         prev = temp;
         temp = temp.next;
      }
      if (temp == null) return;
      
      
      prev.next = temp.next;
   }
   
   // CASE 8: GET FIRST ELEMENT
   public void getFirstElement() { // Method for getting the first element
      Node current = head;
      System.out.println(head.data);
   }
   // CASE 9: GET LAST ELEMENT
   public void getLastElement() { // Method for getting the last element
      Node current = tail;
      System.out.println(tail.data);
   }
   
   // CASE 7: SEARCH
   public boolean search(int item) {
        Node current = head;

        while (current != null) {
            if (current.data == item) {
                return true;
            }
            current = current.next;
        }
        return false;
    }
    
    
   
   public static void main(String[] args) { // Start of the Main Method
      Scanner sc = new Scanner(System.in);
      
      DoublyLinkedList dll = new DoublyLinkedList();
      
      
      while (true) {
         System.out.println("\nMenu:");
         System.out.println("1. Insert an item in the list");
         System.out.println("2. Initialize the list");
         System.out.println("3. isTheListEmpty?? ");
         System.out.println("4. Length of the list");
         System.out.println("5. Output of the list traversing forward");
         System.out.println("6. Output of the list traversing backward");
         System.out.println("7. Search");
         System.out.println("8. Get the first Element");
         System.out.println("9. Get the last Element");
         System.out.println("10. Delete an item from the list");
         System.out.println("11. Exit");
         System.out.print("Enter your choice: ");
         int choice = sc.nextInt();
   
      switch(choice) {
         
         case 1:
            System.out.print("Enter a element in the beginning: ");
            int value = sc.nextInt();
            dll.insert(value);
         break;
         case 2:
            dll.clear();
         break;
         case 3:
            System.out.println("Is the list empty? " + dll.isEmpty());
            
         break;
         case 4:
            dll.getLength();
         break;
         case 5:
            dll.printForward();
         break;
         case 6:
            dll.printBackward();
         break;
         case 7:
           System.out.print("Enter item to search: ");
                    int searchItem = sc.nextInt();
                    System.out.println("Item found in the list: " + dll.search(searchItem));
                    
         break;   
         case 8:
            dll.getFirstElement();
         break;
         case 9:
            dll.getLastElement();
         break;
         case 10:
            System.out.println("Enter number: ");
            value = sc.nextInt();
            dll.deletenode(value);
         break;
         case 11:
            System.out.println("Exiting the program.");
            sc.close();
            System.exit(0);
         default:
            System.out.println("Invalid choice. Please enter a valid option.");
         break;
                    
            }// end of switch case
            
        } // end of while loop
        
    }// end of the main method
   
} // End of the class
