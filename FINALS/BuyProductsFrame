import javax.swing.*;
import java.util.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.GridLayout;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

class BuyProductsFrame extends JFrame implements ActionListener {
    private List<Product> productList;
    private AddProductFrame addProductFrame;
    private List<JSpinner> quantitySpinners;
    private JTextField transactionIdField;
    private JTextField customerIdField;
    private JTextField totalPriceField;
    private JButton buyButton;
    private JButton generateIdButton;

    public BuyProductsFrame(List<Product> productList, AddProductFrame addProductFrame, String userId) {
        super("Buy Products");

        this.productList = productList;
        this.addProductFrame = addProductFrame;

        // Create components for selecting products and quantities
        quantitySpinners = new java.util.ArrayList<>();
        JPanel productPanel = new JPanel(new GridLayout(productList.size(), 2, 10, 5));

        for (Product product : productList) {
            JLabel productLabel = new JLabel(product.getProductName());
            JSpinner quantitySpinner = new JSpinner(new SpinnerNumberModel(0, 0, product.getQuantity(), 1));
            productPanel.add(productLabel);
            productPanel.add(quantitySpinner);

            // Set preferred size for the text fields
            quantitySpinners.add(quantitySpinner);
            
            quantitySpinner.addChangeListener(new ChangeListener() {
                @Override
                public void stateChanged(ChangeEvent e) {
                    updateTotalPrice();
                }
            });
        }
        // Create a random transaction ID
        String randomTransactionId = generateRandomTransactionId();
        
        // Initialize transactionIdField with the random transaction ID
        transactionIdField = new JTextField(randomTransactionId);
        transactionIdField.setEditable(false); // Make it non-editable
        
        // Create "Generate ID" button
        generateIdButton = new JButton("Generate ID");
        generateIdButton.addActionListener(this);
        
        transactionIdField = new JTextField(randomTransactionId);
        transactionIdField.setEditable(false);
        customerIdField = new JTextField();

        totalPriceField = new JTextField();
        totalPriceField.setEditable(false);

        // Create Buy button
        buyButton = new JButton("Buy");
        buyButton.addActionListener(this);

        // Add components to frame
        add(new JLabel("Products:"));
        add(productPanel);
        add(new JLabel("Transaction ID:"));
        add(transactionIdField);
        add(generateIdButton); // Add the "Generate ID" button
        add(new JLabel("Customer ID:"));
        add(customerIdField);
        add(new JLabel("Total Price:"));
        add(totalPriceField);
        add(buyButton);

        // Set layout
        setLayout(new BoxLayout(getContentPane(), BoxLayout.Y_AXIS));

        // Set frame properties
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setSize(400, 300);
        setLocationRelativeTo(null);
        setVisible(true);


        updateTotalPrice(); // Calculate and display the initial total price
        customerIdField.setText(userId);
        customerIdField.setEditable(false);
    }
    
    // Method to generate a random transaction ID
    private String generateRandomTransactionId() {
        UUID uuid = UUID.randomUUID();
        String randomTransactionId = uuid.toString().substring(0, 8); // Use the first 8 characters
        return randomTransactionId;
    }
    
    private void updateTotalPrice() {
        double total = 0;
        for (int i = 0; i < quantitySpinners.size(); i++) {
            int quantity = (int) quantitySpinners.get(i).getValue();
            total += productList.get(i).getPrice() * quantity;
        }
        totalPriceField.setText(String.valueOf(total));
    }

    @Override
    public void actionPerformed(ActionEvent e) {
    if (e.getSource() == generateIdButton) {
            // Generate and set a new random transaction ID
            String randomTransactionId = generateRandomTransactionId();
            transactionIdField.setText(randomTransactionId);
        } else if (e.getSource() == buyButton) {
            // Perform the buying logic here
            String transactionId = transactionIdField.getText();
            String customerId = customerIdField.getText();

            // Validate input
            if (transactionId.isEmpty() || customerId.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter transaction details.", "Incomplete Details", JOptionPane.ERROR_MESSAGE);
            } else {
                // Deduct the quantity from the AddProductFrame for selected products
                for (int i = 0; i < quantitySpinners.size(); i++) {
                    int quantity = (int) quantitySpinners.get(i).getValue();
                    if (quantity > 0) {
                        deductQuantity(productList.get(i).getProductName(), quantity);
                    }
                }

                // Process the purchase (you can add your logic here)
                String purchaseDetails = "Purchase successful!\n";
                purchaseDetails += "Transaction ID: " + transactionId + "\n";
                purchaseDetails += "Customer ID: " + customerId + "\n";
                purchaseDetails += "Total Price: $" + totalPriceField.getText() + "\n";
                JOptionPane.showMessageDialog(this, purchaseDetails, "Purchase Complete", JOptionPane.INFORMATION_MESSAGE);
                dispose(); // Close the BuyProductsFrame after purchase
            }
        }
    }

    private void deductQuantity(String productName, int quantity) {
        for (Product product : productList) {
            if (product.getProductName().equals(productName)) {
                int currentQuantity = product.getQuantity();
                if (currentQuantity >= quantity) {
                    product.setQuantity(currentQuantity - quantity); // Deduct selected quantity
                    addProductFrame.updateProductListArea(); // Update the AddProductFrame
                    break;
                } else {
                    JOptionPane.showMessageDialog(this, "Not enough units available for " + productName, "Insufficient Stock", JOptionPane.WARNING_MESSAGE);
                }
            }
        }
    }

}


