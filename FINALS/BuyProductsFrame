import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.awt.Font;
import java.awt.Toolkit;

class BuyProductsFrame extends JFrame implements ActionListener {
    private List<Product> productList;
    private AddProductFrame addProductFrame;
    private List<JSpinner> quantitySpinners;
    private JTextField transactionIdField;
    private JTextField totalPriceField;
    private JButton buyButton;
    private JTextField customerIdField;
    private JButton generateIdButton;
    private JTextArea addedProductsArea;

    public BuyProductsFrame(List<Product> productList, AddProductFrame addProductFrame, String userId) {
        super("Buy Products");
         setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\MEGATRON\\Documents\\Java Files\\New folder (3)\\100x100.png"));
         setResizable(false);
        this.productList = productList;
        this.addProductFrame = addProductFrame;
        
        
        totalPriceField = new JTextField();
        totalPriceField.setEditable(false);

        
        quantitySpinners = new ArrayList<>();
        customerIdField = new JTextField();
        JPanel productPanel = new JPanel(new GridLayout(productList.size(), 2, 10, 5));

        for (Product product : productList) {
            JLabel productLabel = new JLabel(product.getProductName());
            JSpinner quantitySpinner = new JSpinner(new SpinnerNumberModel(0, 0, product.getQuantity(), 1));
            productPanel.add(productLabel);
            productPanel.add(quantitySpinner);

            
            quantitySpinners.add(quantitySpinner);

            quantitySpinner.addChangeListener(new ChangeListener() {
                @Override
                public void stateChanged(ChangeEvent e) {
                    updateTotalPrice();
                }
            });
        }

        
        transactionIdField = new JTextField(generateRandomTransactionId());
        transactionIdField.setEditable(false); 

        
        buyButton = new JButton("Buy");
        buyButton.addActionListener(this);

        
        generateIdButton = new JButton("Generate ID");
        generateIdButton.addActionListener(this);

        
        JPanel labelsPanel = new JPanel(new GridLayout(4, 1));
        labelsPanel.add(createLabel("Selected Products:"));
        
        
        JPanel transactionIdPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        transactionIdPanel.add(createLabel("Transaction ID:"));
        transactionIdPanel.add(transactionIdField);
        transactionIdPanel.add(generateIdButton);
        labelsPanel.add(transactionIdPanel);
        
        labelsPanel.add(createLabel("Customer ID:"));
        labelsPanel.add(createLabel("Total Price:"));

        JPanel fieldsPanel = new JPanel(new GridLayout(4, 2)); 
        fieldsPanel.add(productPanel);
        fieldsPanel.add(createPanelWithButton(transactionIdField, generateIdButton));
        fieldsPanel.add(customerIdField);
        fieldsPanel.add(totalPriceField);
        
        
        addedProductsArea = new JTextArea(10, 20);
        addedProductsArea.setEditable(false);
        JScrollPane addedProductsScrollPane = new JScrollPane(addedProductsArea);

        
        JPanel addedProductsPanel = new JPanel(new BorderLayout());
        addedProductsPanel.setBorder(BorderFactory.createTitledBorder("Added Products"));
        addedProductsPanel.add(addedProductsScrollPane, BorderLayout.CENTER);
        
        
        add(labelsPanel, BorderLayout.WEST);
        add(fieldsPanel, BorderLayout.CENTER);
        add(buyButton, BorderLayout.SOUTH);

        // Set frame properties
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setSize(600, 400);
        setLocationRelativeTo(null);
        setVisible(true);

        updateTotalPrice(); 
        customerIdField.setText(userId);
        customerIdField.setEditable(false);
    }
    
    private void updateAddedProductsArea() {
        addedProductsArea.setText("");
        for (Product product : productList) {
            addedProductsArea.append(product.toString() + "---------------\n");
        }
    }
    
    private JPanel createPanelWithButton(JTextField textField, JButton button) {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        panel.add(textField);
        panel.add(button);
        return panel;
    }

    private JLabel createLabel(String text) {
        JLabel label = new JLabel(text);
        label.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        return label;
    }

    // Method to generate a random transaction ID
    private String generateRandomTransactionId() {
        UUID uuid = UUID.randomUUID();
        String randomTransactionId = uuid.toString().substring(0, 8); 
        return randomTransactionId;
    }

    private void updateTotalPrice() {
        double total = 0;
        for (int i = 0; i < quantitySpinners.size(); i++) {
            int quantity = (int) quantitySpinners.get(i).getValue();
            total += productList.get(i).getPrice() * quantity;
        }
        totalPriceField.setText(String.format("$%.2f", total));
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == buyButton) {
            completePurchase();
        } else if (e.getSource() == generateIdButton) {
            transactionIdField.setText(generateRandomTransactionId());
        }
    }

    private void completePurchase() {
        String transactionId = transactionIdField.getText();
        String customerId = customerIdField.getText();

        // Validate input
        if (transactionId.isEmpty() || customerId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter transaction details.", "Incomplete Details", JOptionPane.ERROR_MESSAGE);
        } else {
        // Check if at least one product is selected
        boolean atLeastOneProductSelected = false;
        for (int i = 0; i < quantitySpinners.size(); i++) {
            int quantity = (int) quantitySpinners.get(i).getValue();
            if (quantity > 0) {
                atLeastOneProductSelected = true;
                break;
            }
        }
        
        if (!atLeastOneProductSelected) {
            JOptionPane.showMessageDialog(this, "Please select at least one product to buy.", "No Product Selected", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Deduct the quantity from the AddProductFrame for selected products
        for (int i = 0; i < quantitySpinners.size(); i++) {
            int quantity = (int) quantitySpinners.get(i).getValue();
            if (quantity > 0) {
                deductQuantity(productList.get(i).getProductName(), quantity);
            }
        }

            // Process the purchase (you can add your logic here)
        String purchaseDetails = "Purchase successful!\n";
        purchaseDetails += "Transaction ID: " + transactionId + "\n";
        purchaseDetails += "Customer ID: " + customerId + "\n";
        purchaseDetails += "Total Price: " + totalPriceField.getText() + "\n";
        JOptionPane.showMessageDialog(this, purchaseDetails, "Purchase Complete", JOptionPane.INFORMATION_MESSAGE);
        dispose(); // Close the BuyProductsFrame after purchase
        }
    }

    private void deductQuantity(String productName, int quantity) {
        for (Product product : productList) {
            if (product.getProductName().equals(productName)) {
                int currentQuantity = product.getQuantity();
                if (currentQuantity >= quantity) {
                    product.setQuantity(currentQuantity - quantity); 
                    addProductFrame.updateProductListArea(); 
                    break;
                } else {
                    JOptionPane.showMessageDialog(this, "Not enough units available for " + productName, "Insufficient Stock", JOptionPane.WARNING_MESSAGE);
                }
            }
        }
    }
}
