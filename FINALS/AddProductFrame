import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.awt.Toolkit;

class AddProductFrame extends JFrame implements ActionListener {
    private JTextField productNumberField;
    private JTextField productNameField;
    private JTextField descriptionField;
    private JTextField quantityField;
    private JTextField priceField;
    private JButton addButton;
    private JButton proceedButton;
    private JTextArea productListArea;
    private JScrollPane scrollPane;
    private User registeredUser;
    private List<Product> productList;
    private JTextField customerIdField;  
    private JTextField totalPriceField;
    
    public AddProductFrame(User registeredUser) {
        super("Add Product");
         setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\MEGATRON\\Documents\\Java Files\\New folder (3)\\100x100.png"));
         setResizable(false);
        this.registeredUser = registeredUser;
        productList = new ArrayList<>();

        productNumberField = new JTextField();
        productNameField = new JTextField();
        descriptionField = new JTextField();
        quantityField = new JTextField();
        priceField = new JTextField();
        addButton = new JButton("Add Product");
        proceedButton = new JButton("Proceed to Buy");
        productListArea = new JTextArea(20, 40);
        productListArea.setEditable(false);
        scrollPane = new JScrollPane(productListArea);
        customerIdField = new JTextField();
        totalPriceField = new JTextField();
        totalPriceField.setEditable(false);

        setLayout(new BorderLayout());

        add(createUserDetailsPanel(), BorderLayout.NORTH);
        add(createProductDetailsPanel(), BorderLayout.CENTER);
        add(createProductListPanel(), BorderLayout.WEST);
        add(createButtonPanel(), BorderLayout.SOUTH);

        addButton.addActionListener(this);
        proceedButton.addActionListener(this);

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(800, 600);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private JPanel createUserDetailsPanel() {
        JPanel panel = new JPanel(new GridLayout(2, 2, 5, 5));
        panel.setBorder(BorderFactory.createTitledBorder("User Details"));

        panel.add(createLabel("User ID:"));
        panel.add(createLabel(registeredUser.getId()));
        panel.add(createLabel("User Name:"));
        panel.add(createLabel(registeredUser.getName()));

        return panel;
    }

    private JPanel createProductDetailsPanel() {
    JPanel panel = new JPanel(new GridLayout(5, 2, 10, 10));
    panel.setBorder(BorderFactory.createTitledBorder("Product Details"));

    panel.add(createLabel("Product Number:"));
    panel.add(productNumberField);
    panel.add(createLabel("Product Name:"));
    panel.add(productNameField);
    panel.add(createLabel("Description:"));
    panel.add(descriptionField);
    panel.add(createLabel("Quantity:"));
    panel.add(quantityField);
    panel.add(createLabel("Price:"));
    panel.add(priceField);

    return panel;
}

   private JPanel createProductListPanel() {
       JPanel panel = new JPanel(new BorderLayout());
       panel.setBorder(BorderFactory.createTitledBorder("Product List"));
   
       productListArea.setPreferredSize(new Dimension(300, 400));
   
       scrollPane = new JScrollPane();
       scrollPane.setViewportView(productListArea);
       scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
       scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
   
       panel.add(scrollPane, BorderLayout.CENTER);
   
    return panel;
}

private JPanel createButtonPanel() {
    JPanel panel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10)); 
    addButton = new JButton("Add Product");
    proceedButton = new JButton("Proceed to Buy");
    
    JButton logoutButton = new JButton("Logout");
    logoutButton.setActionCommand("logout");
    logoutButton.addActionListener(this);
    
    panel.add(addButton);
    panel.add(proceedButton);
    panel.add(logoutButton);
    
    return panel;
}

    private JLabel createLabel(String text) {
        JLabel label = new JLabel(text);
        label.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        return label;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == addButton) {
            try {
                String productNumber = productNumberField.getText();
                
                if (!validateNumericInput(productNumber)) {
                    JOptionPane.showMessageDialog(this, "Please enter a valid integer for the product number.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                String productName = productNameField.getText();
                String description = descriptionField.getText();
                
                if (productName.isEmpty() || description.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Please fill in all required fields.", "Incomplete Information", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                int quantity = Integer.parseInt(quantityField.getText());
                double price = Double.parseDouble(priceField.getText());
                
                if (quantity < 0 || price < 0) {
                JOptionPane.showMessageDialog(this, "Quantity and price must be non-negative values.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
                return;
               }
            
                Product newProduct = new Product(productNumber, productName, description, quantity, price);
                productList.add(newProduct);

                updateProductListArea();
                clearFields();
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Please enter valid numeric values for quantity and price.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            }
        } else if (e.getSource() == proceedButton) {
            if (productList.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Inventory is empty.", "Empty Inventory", JOptionPane.WARNING_MESSAGE);
            } else {
                openBuyProductsFrame();
            }
        } else if ("logout".equals(e.getActionCommand())) {
        
        dispose(); 
        openLoginFrame(); 
      }
    }
    
    private boolean validateNumericInput(String input) {
        try {
            Integer.parseInt(input);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    
    private void openLoginFrame() {
    
    LoginFrame loginFrame = getLoginFrameInstance();

    if (loginFrame == null) {
        
        loginFrame = new LoginFrame();
        loginFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                
            }
        });
    }

    
    loginFrame.setLoginFrameVisibility(true);
   }
   
   private LoginFrame getLoginFrameInstance() {
    
    for (Window window : Window.getWindows()) {
        if (window instanceof LoginFrame) {
            return (LoginFrame) window;
        }
    }
    return null; 
   }
    
    private void openBuyProductsFrame() {
        BuyProductsFrame buyProductsFrame = new BuyProductsFrame(getProductList(), this, getUserId());
        buyProductsFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                
            }
        });
    }

    private void clearFields() {
        productNumberField.setText("");
        productNameField.setText("");
        descriptionField.setText("");
        quantityField.setText("");
        priceField.setText("");
    }

    void updateProductListArea() {
        productListArea.setText("");
        for (Product product : productList) {
            productListArea.append(product.toString() + "---------------\n");
        }
    }

    public List<Product> getProductList() {
        return productList;
    }

    public double getTotalPrice() {
        double total = 0;
        for (Product product : productList) {
            total += product.getPrice() * product.getQuantity();
        }
        return total;
    }

    public String getUserId() {
        return registeredUser.getId();
    }
}
